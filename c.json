{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"printf": {
		"prefix": "pf",
		"body": "printf(\"${0}\\\\n\");",
		"description": "Snippet for printf %d variable"
	},
	"printf %c variable": {
		"prefix": "pfc",
		"body": "printf(\"${1:var}: %c\\\\n\", ${1:var});",
		"description": "Snippet for printf %c variable"
	},
	"printf %s variable": {
		"prefix": "pfs",
		"body": "printf(\"${1:var}: %s\\\\n\", ${1:var});",
		"description": "Snippet for printf %s variable"
	},
	"printf %p variable": {
		"prefix": "pfp",
		"body": "printf(\"${1:var}: %p\\\\n\", ${1:var});",
		"description": "Snippet for printf %p variable"
	},
	"printf %d variable": {
		"prefix": "pfd",
		"body": "printf(\"${1:var}: %d\\\\n\", ${1:var});",
		"description": "Snippet for printf %d variable"
	},
	"printf %i variable": {
		"prefix": "pfi",
		"body": "printf(\"${1:var}: %i\\\\n\", ${1:var});",
		"description": "Snippet for printf %i variable"
	},
	"printf %li variable": {
		"prefix": "pfli",
		"body": "printf(\"${1:var}: %li\\\\n\", ${1:var});",
		"description": "Snippet for printf %li variable"
	},
	"printf %u variable": {
		"prefix": "pfu",
		"body": "printf(\"${1:var}: %u\\\\n\", ${1:var});",
		"description": "Snippet for printf %u variable"
	},
	"printf %x variable": {
		"prefix": "pfx",
		"body": "printf(\"${1:var}: %x\\\\n\", ${1:var});",
		"description": "Snippet for printf %x variable"
	},
	"printf %X variable": {
		"prefix": "pfX",
		"body": "printf(\"${1:var}: %X\\\\n\", ${1:var});",
		"description": "Snippet for printf %X variable"
	},
	"printf color": {
		"prefix": "pc",
		"body": "printf(BACK_RED\"${0}\"RST\"\\n\");",
		"description": "Snippet for printf %d variable"
	},
	"printf color %c variable": {
		"prefix": "pcc",
		"body": "printf(BACK_YELLOW\"${1:var}: %c\"RST\"\\n\", ${1:var});",
		"description": "Snippet for printf %c variable"
	},
	"printf color %s variable": {
		"prefix": "pcs",
		"body": "printf(BACK_GREEN\"${1:var}: %s\"RST\"\\n\", ${1:var});",
		"description": "Snippet for printf %s variable"
	},
	"printf color %p variable": {
		"prefix": "pcp",
		"body": "printf(BACK_CYAN\"${1:var}: %p\"RST\"\\n\", ${1:var});",
		"description": "Snippet for printf %p variable"
	},
	"printf color %d variable": {
		"prefix": "pcd",
		"body": "printf(BACK_BLUE\"${1:var}: %d\"RST\"\\n\", ${1:var});",
		"description": "Snippet for printf %d variable"
	},
	"printf color %i variable": {
		"prefix": "pci",
		"body": "printf(BACK_PURPLE\"${1:var}: %i\"RST\"\\n\", ${1:var});",
		"description": "Snippet for printf %i variable"
	},
	"printf color %li variable": {
		"prefix": "pcli",
		"body": "printf(BACK_RED\"${1:var}: %li\"RST\"\\n\", ${1:var});",
		"description": "Snippet for printf %li variable"
	},
	"printf color %u variable": {
		"prefix": "pcu",
		"body": "printf(BACK_YELLOW\"${1:var}: %u\"RST\"\\n\", ${1:var});",
		"description": "Snippet for printf %u variable"
	},
	"printf color %x variable": {
		"prefix": "pcx",
		"body": "printf(BACK_GREEN\"${1:var}: %x\"RST\"\\n\", ${1:var});",
		"description": "Snippet for printf %x variable"
	},
	"printf color %X variable": {
		"prefix": "pcX",
		"body": "printf(BACK_CYAN\"${1:var}: %X\"RST\"\\n\", ${1:var});",
		"description": "Snippet for printf %X variable"
	},
	"printf clear console": {
		"prefix": "pclear",
		"body": "printf(\"\\033c\");",
		"description": "Snippet to clear the terminal"
	},
	"printf separator": {
		"prefix": "sep",
		"body": "printf(\"\\n.....................................\\n\\n\");",
		"description": "Snippet to have separator in print"
	},
	"printf separator w color": {
		"prefix": "csep",
		"body": "printf(\"\\n\"RED\"......................................\"RST\"\\n\\n\");",
		"description": "Snippet to have separator in print with color"
	},
	"structure if": {
		"prefix": [
			"if",
		],
		"body": [
			"if ($1 == $2)",
			"{",
			"\t$3",
			"}",
		],
	},
	"structure if elif": {
		"prefix": [
			"elif",
		],
		"body": [
			"if ($1 == $2)",
			"{",
			"\t$3",
			"}",
			"elif ($4 == $5)",
			"{",
			"\t$6",
			"}",
			"else",
			"{",
			"\t$7",
			"}",
		],
	},
	"structure if else": {
		"prefix": [
			"ife",
		],
		"body": [
			"if ($1 == $2)",
			"{",
			"\t$3",
			"}",
			"else",
			"{",
			"\t$4",
			"}",
		],
	},
	"structure if else short": {
		"prefix": [
			"ifs",
		],
		"body": [
			"if ($1 == $2)",
			"\t$3",
			"else",
			"\t$4",
		],
	},
	"structure while": {
		"prefix": [
			"while",
		],
		"body": [
			"while ($1 == $2)",
			"{",
			"\t$3",
			"}",
		],
	},
	"void": {
		"prefix": [
			"v",
		],
		"body": [
			"(void)$1;"
		]
	},
	"return": {
		"prefix": [
			"rtn",
		],
		"body": [
			"return ($1);"
		]
	},
	"return int 0": {
		"prefix": [
			"rtn_zero",
		],
		"body": [
			"return (0);"
		]
	},
	"return int 1": {
		"prefix": [
			"rtn_one",
		],
		"body": [
			"return (1);"
		]
	},

	"include quotes": {
		"prefix": "inc\"",
		"body": "#include \"$1.h\""
	},
	"include chevron": {
		"prefix": "inc<",
		"body": "#include <$1.h>"
	},
	"include all sys": {
		"prefix": "incsys",
		"body": [
			"# include <sys/types.h>",
			"# include <sys/time.h>",
			"# include <sys/resource.h>",
			"# include <sys/wait.h>",
			"# include <sys/stat.h>",
			"# include <sys/ioctl.h>"
		]
	},
	"include all": {
		"prefix": "inca",
		"body": [
			"# include <sys/types.h>",
			"# include <sys/time.h>",
			"# include <sys/resource.h>",
			"# include <sys/wait.h>",
			"# include <sys/stat.h>",
			"# include <sys/ioctl.h>",
			"#include <stdio.h>",
			"#include <string.h>",
			"#include <stdlib.h>",
			"#include <stddef.h>",
			"#include <ctype.h>",
			"#include <unistd.h>",
			"#include <termios.h>",
			"#include <readline/readline.h>",
			"#include <readline/history.h>",
		]
	},

	"print function name": {
		"prefix": "pfu",
		"body": "printf(YELLOW\"[%s]\n\"RST, __func__);"
	},
	"print function name and filename": {
		"prefix": "pffu",
		"body": "printf(BACK_YELLOW\"[%s]\"YELLOW\"\tin\t\"BOLD_YELLOW\"%s\n\"RST, __func__, __FILE__);"
	},

	"main": {
		"prefix": "main",
		"body": [
			"int\tmain(int argc, char *argv[], char** envp)",
			"{",
			"\t$1;",
			"\t(void)argc;",
			"\t(void)argv;",
			"\t(void)envp;",
			"}"
		]
	},

	"test": {
		"prefix": "test",
		"body": [
			"# include <sys/types.h>",
			"# include <sys/time.h>",
			"# include <sys/resource.h>",
			"# include <sys/wait.h>",
			"# include <sys/stat.h>",
			"# include <sys/ioctl.h>",
			"#include <stdio.h>",
			"#include <string.h>",
			"#include <stdlib.h>",
			"#include <stddef.h>",
			"#include <ctype.h>",
			"#include <unistd.h>",
			"#include <termios.h>",
			"#include <readline/readline.h>",
			"#include <readline/history.h>",
			"",
			"int\tmain(int argc, char *argv[], char** envp)",
			"{",
			"\tint\tnbr;",
			"\tchar\t*str;",
			"",
			"\t$1;",
			"\t(void)nbr;",
			"\t(void)str;",
			"\t(void)argc;",
			"\t(void)argv;",
			"\t(void)envp;",
			"}"
		]
	},
	"gnl": {
		"prefix": "gnl",
		"body": [
			"\t\tchar buffer[2];",
			"",
			"while(buffer[0] != '\\0')",
			"{",
				"read(3, buffer, 1);",
				"buffer[1] = '\\0';",
				"printf(\"buffer[0]: %c\", buffer[0]);",
			"}",
		]
	}

}